---
- hosts: all
  gather_facts: true
  become: true

  tasks:
    - name: Include all variables
      ansible.builtin.include_vars:
        dir: vars

    - name: Set timezone to Warsaw
      community.general.timezone:
        name: Europe/Warsaw

    - name: Harden ssh
      ansible.builtin.include_role:
        name: devsec.hardening.ssh_hardening
      tags: security

    - name: Harden os
      ansible.builtin.include_role:
        name: devsec.hardening.os_hardening
      tags: security

    - name: Install pip
      ansible.builtin.include_role:
        name: geerlingguy.pip
      tags: provisioning

    - name: Install docker
      ansible.builtin.include_role:
        name: geerlingguy.docker
      tags: provisioning

    - name: Set ufw logging
      community.general.ufw:
        logging: "on"

    - name: Reject connections instead of denying
      community.general.ufw:
        rule: reject
        port: auth
        log: true

    - name: Limit ssh connections
      community.general.ufw:
        rule: limit
        port: ssh
        proto: tcp

    - name: Allow all access to tcp port 22
      community.general.ufw:
        rule: allow
        name: OpenSSH

    - name: Allow all access to tcp port 80
      community.general.ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Allow all access to tcp port 443
      community.general.ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Allow all access to udp port {{ minecraft_port }}
      community.general.ufw:
        rule: allow
        port: "{{ minecraft_port }}"
        proto: udp

    - name: Install list of packages
      ansible.builtin.apt:
        name: "{{ apt_packages }}"
        state: present
        update_cache: true

    - name: Download ctop
      ansible.builtin.get_url:
        url: https://github.com/bcicen/ctop/releases/download/v{{ ctop_version }}/ctop-{{ ctop_version }}-linux-amd64
        dest: /usr/local/bin/ctop
        mode: "0641"

    - name: Install snap packages
      community.general.snap:
        name: certbot
        classic: true

    - name: Generate https certificate
      ansible.builtin.command: certbot certonly --standalone -d {{ nginx_domain }} --email {{ certbot_email }} --agree-tos --noninteractive
      args:
        creates: /etc/letsencrypt/live/{{ nginx_domain }}/fullchain.pem

    - name: Create directories for services
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        mode: 0640
        force: true
      loop:
        - "{{ nginx_dir }}"
        - "{{ minecraft_dir }}"

    - name: Copy nginx config files
      ansible.builtin.copy:
        src: ./data/nginx/homepage
        dest: "{{ nginx_dir }}/"
        owner: root
        mode: 0640
        force: true
      tags: deploy

    - name: Start nginx
      community.docker.docker_compose:
        project_src: "{{ nginx_dir }}/homepage"
        build: true
        state: present
      tags: deploy

    - name: Copy minecraft config files
      ansible.builtin.template:
        src: ./data/minecraft/templates/docker-compose.yml.j2
        dest: "{{ minecraft_dir }}/docker-compose.yml"
        owner: root
        mode: 0640
        force: true
      tags: deploy

    - name: Start minecraft
      community.docker.docker_compose:
        project_src: "{{ minecraft_dir }}"
        build: false
        pull: true
        state: present
      tags: deploy

    - name: Create cache directory
      ansible.builtin.file:
        path: "{{ cache_dir }}"
        state: directory
        owner: root
        mode: 0640
        force: true

    - name: Download mc-monitor
      ansible.builtin.get_url:
        url: https://github.com/itzg/mc-monitor/releases/download/{{ mc_monitor_version }}/mc-monitor_{{ mc_monitor_version }}_linux_amd64.tar.gz
        dest: "{{ cache_dir }}/mc-monitor.tgz"
        mode: 0640

    - name: Extract mc-monitor.tgz
      ansible.builtin.unarchive:
        src: "{{ cache_dir }}/mc-monitor.tgz"
        dest: "{{ cache_dir }}"
        remote_src: true
        mode: "0641"

    - name: Copy mc-monitor binary
      ansible.builtin.copy:
        src: "{{ cache_dir }}/mc-monitor"
        dest: /usr/local/bin/
        remote_src: true
        mode: "0641"

    - name: Copy script for checking number of players and updating index.html
      ansible.builtin.template:
        src: ./data/scripts/refresh-num-of-players.sh.j2
        dest: /usr/local/bin/refresh-num-of-players.sh
        owner: root
        mode: "0641"
        force: true

    - name: "Crontab: fill PATH variable"
      ansible.builtin.cron:
        name: PATH
        env: true
        value: /usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin

    - name: "Crontab: fill LD_LIBRARY_PATH variable"
      ansible.builtin.cron:
        name: LD_LIBRARY_PATH
        env: true
        value: /usr/local/lib

    - name: "Crontab: refresh number of players"
      ansible.builtin.cron:
        name: Refresh number of players
        hour: "*"
        minute: "*"
        job: /usr/local/bin/refresh-num-of-players.sh
        user: root

    - name: Copy minecraft scripts
      ansible.builtin.copy:
        src: ./data/scripts/{{ item }}
        dest: /usr/local/bin/{{ item }}
        owner: root
        mode: "0641"
        force: true
      loop:
        - minecraft-weather-clear.sh
        - minecraft-restart-server.sh

    - name: "Crontab: refresh certificates"
      ansible.builtin.cron:
        name: Refresh https certificates
        hour: 6
        minute: 0
        job: certbot certonly -n --webroot -w /usr/share/nginx/html -d "{{ nginx_domain }}" --deploy-hook='docker exec nginx nginx -s reload'
        user: root

    - name: "Crontab: cleanup docker images"
      ansible.builtin.cron:
        name: Cleanup docker images
        hour: 7
        minute: 0
        job: docker system prune -af
        user: root

    - name: "Crontab: minecraft cleanup weather"
      ansible.builtin.cron:
        name: Cleanup minecraft weather
        hour: "*"
        minute: "*"
        job: /usr/local/bin/minecraft-weather-clear.sh
        user: root

    - name: "Crontab: minecraft restart server"
      ansible.builtin.cron:
        name: Minecraft restart server
        hour: 7
        minute: 10
        job: /usr/local/bin/minecraft-restart-server.sh
        user: root
